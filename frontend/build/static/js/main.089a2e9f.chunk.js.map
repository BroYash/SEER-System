{"version":3,"sources":["Components/Comment/CommentSingle.js","Components/Comment/CommentForm.js","Components/Comment/CommentList.js","Components/App.js","serviceWorker.js","index.js"],"names":["CommentSingle","props","className","comment","CommentForm","event","preventDefault","axios","post","firstName","this","refs","value","then","response","console","log","catch","error","onSubmit","submitComment","bind","id","ref","type","htmlFor","name","React","Component","CommentList","comments","map","item","href","key","_id","onClick","updateCurrentComment","App","state","currentComment","get","setState","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iQAgBeA,EAdO,SAACC,GAEnB,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,2BACX,0BAAMA,UAAU,cAAcD,EAAME,QAAQA,cCkCrDC,E,4KAtCGC,GACVA,EAAMC,iBAENC,IAAMC,KAAK,iCAAkC,CACzCC,UAAWC,KAAKC,KAAKF,UAAUG,MAC/BT,QAASO,KAAKC,KAAKR,QAAQS,QAE9BC,MAAK,SAACC,GACHC,QAAQC,IAAIF,MAEfG,OAAM,SAACC,GACJH,QAAQC,IAAIE,Q,+BAKhB,OACI,yBAAKhB,UAAU,OACX,wBAAIA,UAAU,UAAd,mBACA,0BAAMA,UAAU,UAAUiB,SAAUT,KAAKU,cAAcC,KAAKX,OACxD,yBAAKR,UAAU,OACX,yBAAKA,UAAU,sBACX,2BAAOoB,GAAG,YAAYC,IAAI,YAAYC,KAAK,SAC3C,2BAAOC,QAAQ,aAAf,eAEJ,yBAAKvB,UAAU,sBACX,2BAAOoB,GAAG,UAAUC,IAAI,UAAUC,KAAK,SACvC,2BAAOC,QAAQ,WAAf,aAGR,4BAAQvB,UAAW,+BAA+BsB,KAAK,SACvDE,KAAO,UADP,qB,GA/BMC,IAAMC,WCYjBC,EAdK,SAAC5B,GACjB,OACA,6BACI,wBAAIC,UAAU,0BACV,wBAAIA,UAAU,qBAAoB,yCACjCD,EAAM6B,SAASC,KAAI,SAACC,GAAD,OAChB,uBAAGC,KAAK,KAAK/B,UAAU,kBAAkBgC,IAAKF,EAAKG,IACnDC,QAASnC,EAAMoC,qBAAqBhB,U,EAAUW,IAAQA,EAAKvB,iBCqD5D6B,E,kDAtDb,WAAYrC,GAAQ,IAAD,8BACjB,cAAMA,IACDsC,MAAQ,CACXT,SAAU,GACVU,eAAgB,IAGlB,EAAKH,qBAAuB,EAAKA,qBAAqBhB,KAA1B,gBAPX,E,gEAUE,IAAD,OAGlBd,IAAMkC,IAFM,kCAGT5B,MAAK,SAACC,GACL,EAAK4B,SAAS,CACZZ,SAAUhB,EAAS6B,UAGtB1B,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,2CAIGc,GACnBtB,KAAKgC,SAAS,CACZF,eAAgBR,M,+BAKlB,OACE,yBAAK9B,UAAU,mBACb,yBAAKA,UAAU,OACb,6BACE,yBAAKA,UAAU,6BACb,uBAAG+B,KAAK,IAAI/B,UAAU,cAAtB,oBAIN,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UAAS,kBAAC,EAAD,CAAa4B,SAAUpB,KAAK6B,MAAMT,SACxDO,qBAAsB3B,KAAK2B,wBAE7B,yBAAKnC,UAAU,UAAS,kBAAC,EAAD,CAAeC,QAAWO,KAAK6B,MAAMC,mBAE/D,yBAAKtC,UAAU,OACb,yBAAKA,UAAU,WAAU,kBAAC,EAAD,a,GAhDjByB,IAAMC,WCKJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdzC,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMyC,c","file":"static/js/main.089a2e9f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CommentSingle = (props) => {\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col s12 m6\">\r\n                <div className=\"card blue-grey darken-1\">\r\n                    <div className=\"card-content white-text\">\r\n                        <span className=\"card-title\">{props.comment.comment}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CommentSingle;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nclass CommentForm extends React.Component {\r\n    submitComment(event) {\r\n        event.preventDefault();\r\n\r\n        axios.post('http://localhost:4000/comments', {\r\n            firstName: this.refs.firstName.value,\r\n            comment: this.refs.comment.value,\r\n        })\r\n        .then((response) => {\r\n            console.log(response);\r\n        })\r\n        .catch((error) =>{\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <h1 className=\"center\">Add new comment</h1>\r\n                <form className=\"col s12\" onSubmit={this.submitComment.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s6\">\r\n                            <input id=\"firstName\" ref=\"firstName\" type=\"text\" />\r\n                            <label htmlFor=\"firstName\">First Name</label>\r\n                        </div>\r\n                        <div className=\"input-field col s6\">\r\n                            <input id=\"comment\" ref=\"comment\" type=\"text\" />\r\n                            <label htmlFor=\"comment\">Comment</label>\r\n                        </div>\r\n                    </div>\r\n                    <button className= \"btn waves-effect waves-light\" type=\"submit\"\r\n                    name = \"action\">Add comment</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommentForm;","import React from 'react';\r\n\r\nconst CommentList = (props) => {\r\n    return ( \r\n    <div>\r\n        <ul className=\"collection with-header\">\r\n            <li className=\"collection-header\"><h4>Comments</h4></li>\r\n            {props.comments.map((item) => (\r\n                <a href=\"#!\" className=\"collection-item\" key={item._id}\r\n                onClick={props.updateCurrentComment.bind(this,item)}>{item.firstName}</a>\r\n            ))}\r\n        </ul>\r\n    </div> \r\n    );\r\n}\r\n \r\nexport default CommentList;","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport CommentSingle from './Comment/CommentSingle';\nimport CommentForm from './Comment/CommentForm';\nimport CommentList from './Comment/CommentList';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comments: [],\n      currentComment: {},\n    }\n\n    this.updateCurrentComment = this.updateCurrentComment.bind(this);\n  }\n\n  componentDidMount() {\n    const url = 'http://localhost:4000/comments';\n\n    axios.get(url)\n      .then((response) => {\n        this.setState({\n          comments: response.data\n        })\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  updateCurrentComment(item) {\n    this.setState({\n      currentComment: item,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <nav>\n            <div className=\"nav-wrapper blue darken-1\">\n              <a href=\"/\" className=\"brand-logo\">Comment Maker</a>\n            </div>\n          </nav>\n        </div>\n        <div className=\"row\">\n          <div className=\"col s3\"><CommentList comments={this.state.comments}\n            updateCurrentComment={this.updateCurrentComment} />\n          </div>\n          <div className=\"col s9\"><CommentSingle comment = {this.state.currentComment} /></div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col s12\"><CommentForm /></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}